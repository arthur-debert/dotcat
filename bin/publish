#! /usr/bin/env bash

usage() {
  echo "Usage: $0 [--version <version>|bump] [--production] [--help]"
  echo ""
  echo "Options:"
  echo "  --version <version>  Specify the version to publish. Use 'bump' to auto-increment the patch version."
  echo "  --production         Publish to the production PyPI repository."
  echo "  --help               Display this help message."
  echo ""
  echo "Notes:"
  echo "  - If --version is set to 'bump', the script will:"
  echo "    1. Check if the git repository is clean (no uncommitted changes)."
  echo "    2. Call 'poetry version patch' to increment the patch version."
  echo "    3. Add the updated pyproject.toml to the git index and commit it."
  echo "    4. Push the commit to the remote repository."
  echo "  - If --version is not provided, the version must be manually updated in pyproject.toml and committed before running the script."
  echo "  - Use the --production flag to publish to the production PyPI repository. By default, the script publishes to the test PyPI repository."
  echo ""
  echo "Examples:"
  echo "  To publish to the production PyPI repository with a version bump:"
  echo "    $0 --version bump --production"
}

check_git_clean() {
  if ! git diff-index --quiet HEAD --; then
    echo "Git repository has uncommitted changes. Please commit or stash them before proceeding." && exit 1
  fi
}

bump_version_and_commit() {
  poetry version patch || exit
  local new_version
  new_version=$(poetry version | cut -d ' ' -f2) || exit
  git add pyproject.toml
  git commit -m "Bumped version number to ${new_version}" || exit
  git push
  echo "$new_version"
}

publish() {
  local version="$1"
  local repository="$2"
  local libname
  libname="$(poetry version | cut -d ' ' -f1)"

  # If version not provided via --version, get it from poetry
  if [ -z "$version" ]; then
    version=$(poetry version | cut -d ' ' -f2) || exit
  fi

  # Publish the package
  if [[ -d "dist" ]]; then
    rm -rf dist
  fi
  poetry build || exit
  # this runs the brew formula generator:
  ./bin/homebrew-no-deps
  # now check if we need to commit the new homebrew formula
  if git diff-index --quiet HEAD -- homebrew/dotcat.rb; then
    echo "Homebrew formula is up to date."
  else
    git add homebrew/"${libname}".rb
    git commit -m "Update homebrew formula for version ${version}"
    git push
  fi
  twine upload --repository "$repository" dist/* || exit


  # Tagging logic
  if git rev-parse "v${version}" >/dev/null 2>&1; then
    echo "Tag v${version} already exists." && exit
  fi

  git tag "v$version" && echo "Tag v$version created."
  git push origin "v${version}" && echo "Tag v${version} pushed to origin."

  # Create a GitHub release
  gh release create "v${version}" --title "v${version}" --notes "Release version ${version}" || exit
  echo "GitHub release v${version} created."
}

# Set default repository
repository="test-pypi"

# Parse command-line arguments for version, repository, and production flag
while [[ $# -gt 0 ]]; do
  case "$1" in
    --version)
      version="$2"
      shift 2
      ;;
    --production)
      repository="pypi"
      shift
      ;;
    --help)
      usage
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      usage
      exit 1
      ;;
  esac
done

# Handle version bump
if [ "$version" == "bump" ]; then
  check_git_clean
  version=$(bump_version_and_commit)
fi

# Call the publish function with the parsed arguments
publish "$version" "$repository"
